# This is the main desktop application release workflow for both nightly and beta/stable releases.

name: Build-Js

on:
  push:
    branches: [darwis]
    paths-ignore:
      - '*.md'
  workflow_dispatch:
    inputs:
      build-target:
        description: 'Build Target ("nightly"/"beta"/"non-release")'
        type: string
        required: true
        default: "nightly"
      git-ref:
        description: "Release Git Ref(darwis)"
        required: true
        default: "darwis"
      is-draft:
        description: 'Draft Release? (Beta only, Nightly will always be a non-draft)'
        type: boolean
        required: true
        default: true
      is-pre-release:
        description: 'Pre Release? (labeled as "PreRelease")'
        type: boolean
        required: true
        default: true

env:
  CLOJURE_VERSION: '1.10.1.763'
  NODE_VERSION: '16'

jobs:
  compile-cljs:
    runs-on: ubuntu-18.04
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.git-ref }}

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn cache directory
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 1.8

      - name: Cache clojure deps
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
          key: ${{ runner.os }}-clojure-lib-${{ hashFiles('**/deps.edn') }}

      - name: Setup clojure
        uses: DeLaGuardo/setup-clojure@3.5
        with:
          cli: ${{ env.CLOJURE_VERSION }}

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js "${{ github.event.inputs.build-target }}")
          echo ::set-output name=version::$pkgver

      - name: Update Nightly APP Version
        run: |
          sed -i 's/defonce version ".*"/defonce version "${{ steps.ref.outputs.version }}-drw"/g' src/main/frontend/version.cljs

      - name: Compile CLJS
        run: yarn install && yarn release

      - name: Update APP Version
        run: |
          sed -i 's/"version": "0.0.1"/"version": "${{ steps.ref.outputs.version }}"/g' ./package.json
        working-directory: ./static

      - name: Display Package.json
        run: cat ./package.json
        working-directory: ./static

      - name: Save VERSION file
        run: echo "${{ steps.ref.outputs.version }}" > ./VERSION
        working-directory: ./static

      - name: List Files
        run: ls -al
        working-directory: ./static

      - name: Cache Static File
        uses: actions/upload-artifact@v2
        with:
          name: static
          path: static

      # - name: Pack Js Files
      #   run: tar -cvf logseq-js.tar ./
      #   working-directory: ./static/js

      - name: Zip Js Files
        run: zip logseq-js-${{ steps.ref.outputs.version }}.zip ./js/* -r
        working-directory: ./static

      # - name: Upload Artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: logseq-js.zip
      #     path: ./static/logseq-js.zip

      - name: Telegram Notify
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Build Complete Logseq-js-${{ steps.ref.outputs.version }}
          document: ./static/logseq-js-${{ steps.ref.outputs.version }}.zip

      - name: Upload File
        id: upload
        uses: JantHsueh/upload-file-action@master
        with:
          url: https://n8n.darwis.id/webhook/8752e9b8-734a-4f7e-927a-052d592504ce
          forms: '{"fileName":"logseq-js-${{ steps.ref.outputs.version }}.zip"}'
          fileForms: '{"data":"static/logseq-js-${{ steps.ref.outputs.version }}.zip"}'

      - name: Remove Js Zip
        run: rm logseq-js-${{ steps.ref.outputs.version }}.zip
        working-directory: ./static

      - name: Move static to public
        run: mv ./static ./public

      - name: Remove workpsace folder
        run: rm -r ./public/workspaces

      - name: Modify Dockerfile 1
        run: echo "FROM nginx:stable-alpine" > Dockerfile

      - name: Modify Dockerfile 2
        run: echo "COPY ./public /usr/share/nginx/html" >> Dockerfile

      - name: View Dockerfile
        run: cat Dockerfile

      - name: Build Docker
        run: |
          docker build -t ghcr.io/darwis059/logseq-webapp:latest .

      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Docker Image
        run: docker push ghcr.io/darwis059/logseq-webapp:latest